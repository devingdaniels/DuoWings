const mongoose = require('mongoose');

// User Schema
const userSchema = new mongoose.Schema({
  username: {
    type: String,
    unique: true,
    required: true,
  },
  email: {
    type: String,
    unique: true,
    required: true,
  },
  password: {
    type: String,
    required: true,
  },
  wordSets: [{ type: mongoose.Schema.Types.ObjectId, ref: 'WordSet' }],
  preferences: { type: mongoose.Schema.Types.ObjectId, ref: 'UserPreferences' },
  // User's word progress tracking
  wordProgress: [{ type: mongoose.Schema.Types.ObjectId, ref: 'UserWord' }],
});

// Word Schema
const wordSchema = new mongoose.Schema({
  word: {
    type: String,
    required: true,
  },
  englishDefinition: String,
  exampleSentence: String,
  wordType: String,
  conjugation: String,
  correctCount: {
    type: Number,
    default: 0,
  },
  incorrectCount: {
    type: Number,
    default: 0,
  },
  lastCorrectDate: {
    type: Date,
  },
  lastIncorrectDate: {
    type: Date,
  },
});

// WordSet Schema
const wordSetSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  description: String,
  words: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Word' }],
  // WordSet-specific user word progress tracking
  userWordProgress: [{ type: mongoose.Schema.Types.ObjectId, ref: 'UserWord' }],
});

// UserWord Schema (for tracking user's progress)
const userWordSchema = new mongoose.Schema({
  word: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Word',
    required: true,
  },
  lastPracticedDate: Date,
  correctCount: Number,
  incorrectCount: Number,
});

// QuizResult Schema
const quizResultSchema = new mongoose.Schema({
  wordSet: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'WordSet',
    required: true,
  },
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  score: Number,
  date: {
    type: Date,
    default: Date.now,
  },
});

// DailyChallenge Schema
const dailyChallengeSchema = new mongoose.Schema({
  wordSet: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'WordSet',
    required: true,
  },
  date: {
    type: Date,
    required: true,
  },
});

// Leaderboard Schema
const leaderboardSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  score: Number,
  rank: Number,
});

// Badge Schema
const badgeSchema = new mongoose.Schema({
  name: String,
  description: String,
  criteria: {
    // Define criteria for earning the badge
  },
});

// UserPreferences Schema
const userPreferencesSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  darkMode: Boolean,
  notifications: Boolean,
  difficultyLevel: String,
});

const User = mongoose.model('User', userSchema);
const Word = mongoose.model('Word', wordSchema);
const WordSet = mongoose.model('WordSet', wordSetSchema);
const UserWord = mongoose.model('UserWord', userWordSchema);
const QuizResult = mongoose.model('QuizResult', quizResultSchema);
const DailyChallenge = mongoose.model('DailyChallenge', dailyChallengeSchema);
const Leaderboard = mongoose.model('Leaderboard', leaderboardSchema);
const Badge = mongoose.model('Badge', badgeSchema);
const UserPreferences = mongoose.model('UserPreferences', userPreferencesSchema);

module.exports = {
  User,
  Word,
  WordSet,
  UserWord,
  QuizResult,
  DailyChallenge,
  Leaderboard,
  Badge,
  UserPreferences,
};

---------------------------------------------------------------------------------


import { useState } from "react";

const spanishWords = [
  { word: "hola", definition: "hello" },
  { word: "adios", definition: "goodbye" },
];

const VocabCard = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);

  const handleCardClick = () => {
    setIsFlipped(!isFlipped);
  };

  const handleNextClick = () => {
    const nextIndex = (currentIndex + 1) % spanishWords.length;
    setCurrentIndex(nextIndex);
    setIsFlipped(false);
  };

  const handlePrevClick = () => {
    const prevIndex =
      (currentIndex - 1 + spanishWords.length) % spanishWords.length;
    setCurrentIndex(prevIndex);
    setIsFlipped(false);
  };

  return (
    <div className="vocab-card-container">
      <div
        className={`vocab-card ${isFlipped ? "flipped" : ""}`}
        onClick={handleCardClick}
      >
        <div className="card">
          <div className={`face front ${isFlipped ? "hidden" : ""}`}>
            {spanishWords[currentIndex].word}
          </div>
          <div className={`face back ${isFlipped ? "" : "hidden"}`}>
            {spanishWords[currentIndex].definition}
          </div>
        </div>
      </div>
      <div className="navigation-buttons">
        <button onClick={handlePrevClick}>Previous</button>
        <button onClick={handleNextClick}>Next</button>
      </div>
    </div>
  );
};

export default VocabCard;


// CSS

.vocab-card-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.vocab-card {
  perspective: 1000px;
  width: 200px;
  height: 300px;
  position: relative;
  cursor: pointer;
}

.vocab-card.flipped .card {
  transform: rotateX(180deg);
}

.card {
  width: 100%;
  height: 100%;
  position: absolute;
  transform-style: preserve-3d;
  transition: transform 0.5s;
}

.face {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 24px;
  border-radius: 5px;
  backface-visibility: hidden;
  position: absolute;
  background-color: #3498db;
  color: #fff;
  transition: opacity 0.5s; /* Add opacity transition */
}

.face.back {
  background-color: #e74c3c;
  transform: rotateX(180deg);
}

.face.hidden {
  opacity: 0; /* Hide non-visible faces */
}

.navigation-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.navigation-buttons button {
  background-color: #3498db;
  color: #fff;
  border: none;
  border-radius: 5px;
  padding: 10px 15px;
  font-size: 16px;
  cursor: pointer;
}

.navigation-buttons button:hover {
  background-color: #2980b9;
}


---------------------------------------------------------------------------------

