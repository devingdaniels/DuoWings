const WordSchema = new mongoose.Schema({
  word: {
    type: String,
    required: true,
  },
  englishDefinition: {
    type: String,
    required: true,
  },
  wordType: {
    type: String,
    required: true,
  },
  conjugation: String,
  correctCount: {
    type: Number,
    default: 0,
  },
  incorrectCount: {
    type: Number,
    default: 0,
  },
  lastCorrectDate: {
    type: [Date],
  },
  lastIncorrectDate: {
    type: [Date],
  },
  creationDate: {
    type: Date,
    required: true,
  },
  difficulty: {
    type: Number,
    default: 0,
  },
  tags: [String], //
  exampleSentence: String,
  userNotes: String,
});

const WordDeckSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  description: String,
  tags: [String],
  creationDate: {
    type: Date,
    default: Date.now,
  },
  insertOrder: [Number],
  words: [WordSchema],
  // Gamification Fields
  experiencePoints: {
    type: Number,
    default: 0,
  },
  level: {
    type: Number,
    default: 1,
  },
  completedChallenges: [String], // IDs or names of completed challenges
  badges: [String], // IDs or names of earned badges
  streak: {
    type: Number,
    default: 0,
  },
  lastStreakDate: {
    type: Date,
  },
});



// QuizResult Schema
const quizResultSchema = new mongoose.Schema({
  wordSet: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'WordSet',
    required: true,
  },
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  score: Number,
  date: {
    type: Date,
    default: Date.now,
  },
});

// DailyChallenge Schema
const dailyChallengeSchema = new mongoose.Schema({
  wordSet: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'WordSet',
    required: true,
  },
  date: {
    type: Date,
    required: true,
  },
});

// Leaderboard Schema
const leaderboardSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  score: Number,
  rank: Number,
});

// Badge Schema
const badgeSchema = new mongoose.Schema({
  name: String,
  description: String,
  criteria: {
    // Define criteria for earning the badge
  },
});

// UserPreferences Schema
const userPreferencesSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  darkMode: Boolean,
  notifications: Boolean,
  difficultyLevel: String,
});


---------------------------------------------------------------------------------

import { useState } from "react";

const spanishWords = [
  { word: "hola", definition: "hello" },
  { word: "adios", definition: "goodbye" },
];

const VocabCard = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);

  const handleCardClick = () => {
    setIsFlipped(!isFlipped);
  };

  const handleNextClick = () => {
    const nextIndex = (currentIndex + 1) % spanishWords.length;
    setCurrentIndex(nextIndex);
    setIsFlipped(false);
  };

  const handlePrevClick = () => {
    const prevIndex =
      (currentIndex - 1 + spanishWords.length) % spanishWords.length;
    setCurrentIndex(prevIndex);
    setIsFlipped(false);
  };

  return (
    <div className="vocab-card-container">
      <div
        className={`vocab-card ${isFlipped ? "flipped" : ""}`}
        onClick={handleCardClick}
      >
        <div className="card">
          <div className={`face front ${isFlipped ? "hidden" : ""}`}>
            {spanishWords[currentIndex].word}
          </div>
          <div className={`face back ${isFlipped ? "" : "hidden"}`}>
            {spanishWords[currentIndex].definition}
          </div>
        </div>
      </div>
      <div className="navigation-buttons">
        <button onClick={handlePrevClick}>Previous</button>
        <button onClick={handleNextClick}>Next</button>
      </div>
    </div>
  );
};

export default VocabCard;


// CSS

.vocab-card-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.vocab-card {
  perspective: 1000px;
  width: 200px;
  height: 300px;
  position: relative;
  cursor: pointer;
}

.vocab-card.flipped .card {
  transform: rotateX(180deg);
}

.card {
  width: 100%;
  height: 100%;
  position: absolute;
  transform-style: preserve-3d;
  transition: transform 0.5s;
}

.face {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 24px;
  border-radius: 5px;
  backface-visibility: hidden;
  position: absolute;
  background-color: #3498db;
  color: #fff;
  transition: opacity 0.5s; /* Add opacity transition */
}

.face.back {
  background-color: #e74c3c;
  transform: rotateX(180deg);
}

.face.hidden {
  opacity: 0; /* Hide non-visible faces */
}

.navigation-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.navigation-buttons button {
  background-color: #3498db;
  color: #fff;
  border: none;
  border-radius: 5px;
  padding: 10px 15px;
  font-size: 16px;
  cursor: pointer;
}

.navigation-buttons button:hover {
  background-color: #2980b9;
}



-------------------------------------FUNCTION TO RETRIEVE AND RETURN ALL WORDS AS ARRAY--------------------------------------------

import * as fs from "fs/promises";
import { Response, Request } from "express";

function capitalizeFirstLetter(word: string) {
  return word.charAt(0).toUpperCase() + word.slice(1);
}

async function readFileAndCreateArray(filePath: string): Promise<string[]> {
  try {
    const content = await fs.readFile(filePath, "utf8");
    const lines = content
      .split(/\r?\n/) // Split on newlines
      .map((line) => line.trim()) // Remove leading/trailing whitespace
      .filter((line) => line !== ""); // Remove empty lines
    const wordsArray: string[] = [];
    // Loop through the lines and split into words
    for (const line of lines) {
      const words = line.split(",");
      for (const word of words) {
        wordsArray.push(capitalizeFirstLetter(word.trim()));
      }
    }
    return wordsArray;
  } catch (error) {
    console.error("An error occurred while reading the file:", error);
    return [];
  }
}

export async function getAllWords(req: Request, res: Response): Promise<void> {
  const filePath = "./services/words.txt"; // Relative to the root of the project
  const wordsArray = await readFileAndCreateArray(filePath);
  wordsArray.sort();
  res.status(200).json(wordsArray);
}



-------------------------------------VOCAB WORDS--------------------------------------------
Andar
A menudo
A tiempo
A veces
Abajo
Abriendo
Abro
Aburrir
Acabar
Acordarse
Acostarse
Actualmente
Acuesdarse
Acá
Ademas
Adónde
Afeitarse
Ahi
Ahora mismo
Ajedrez
Al
Al lado
Aldea
Algo
Alguien
Alguna
Algunos
Algún
Allá
Alumno
Amable
Amar
Ambas
Anoche
Anteayer
Antes
Anuncio
Apenas
Aprender
Aquel
Aquel
Aquella
Aquellas
Aquellos
Aromático
Árboles
Arriba
Asi
Asignatura
Atrás
Aula
Ayer
Barato
Barco
Bastante
Bañarse
Bebiendo
Bebiste
Bello/a
Blusa
Bosque
Botas
Brindar
Buen
Bueno
Buscandar
Buscar
Búhos
Cabello
Cabeza
Cada
Caer
Caerse
Caluroso
Cambiar
Caminamos
Caminar
Campesino/a
Canciones
Cantar
Cara
Caro
Carro
Cartas
Cartera
Casado
Casi
Casi
Celebrar
Cenar
Centavos
Centro
Cepillarse
Cepillarse el pelo
Cepillarse los dientes
Cepillo
Cerca de
Cercanas
Cercano
Cerdo
Cerrar
Cerraron
Cerró
Chorizo
Chuchillo
Cien
Ciento
Cierto
Cincuenta
Clima
Cocinó
Cogar
Coger
Cogimos
Cojar
Comenzar
Comiendo
Completemente
Comprar
Compras
Con frecuencia
Conducir
Conducir
Conectar
Confundido/confundida
Congestionado/a
Conocer
Conocer (pretérito)
Correr
Corto
Cosarse
Costar
Cuales
Cuarenta
Cuarto
Cuartos
Cuchares
Cuerpo
Cuesta
Cuál
Cómo
Dar
Dar
Dar (preterite)
Darse con
Dañar
De repente
De veras
De vez en cuando
Deber
Decir
Decir
Decir (preterite tense)
Del
De cualquier forma
Delgado
Dentro
Derecha
Derecho
Desayunar
Desde
Desde…hasta
Despacio
Despacio
Despertarse
Despiertas
Después
Detestar
Detrás
Dibujando
Dibujar
Diccionario
Diente
Direcciónes
Diseñar
Divertirse
Divorciado/a
Divorciarse
Doler
Dormirse
Dos veces
Doy
Duchar
Ducharse
Duermes
Durante
Edad
Ejemplo
El abrigo
El accidente
El almacén
El amor
El aniversario (de bodas)
El autun
El azul
El beso
El brazo
El cepillo de dientes
El champaña (champán)
El champiñón
El champú
El clima
El corazón
El cuello
El cuerpo
El cumpleaños
El césped
El dedo
El dedo del pie
El dentista
El dependiente
El despertador
El dinero en efectivo
El divorcio
El dolor
El día de fiesta
El espejo
El estado civil
El estómago
El helado
El hueso roto
El impermeable
El inodoro
El invitado
El jabón
El lavabo
El maiz
El maquillaje
El matrimonio
El mercado
El mercado al aire libre
El mesero
El nacimiento
El oido
El paciente
El pastel (de chocolate)
El pavo
El pez
El piso
El precio (fijo)
El rancho
El recién casado
El regalo
El resdriado
El suéter
El síntoma
El tobillo
El traje
El traje de baño
El venador
El vendedor
El vestido
Elegante
Elegir
Embarazada
Emocionante
Empezar
Empezar
Empleada/o
Enamorarse
Encantar
Encima
Encontrar
Encontrarte
Encontrase
Encontré
Encuentras
Encuentro
Enero
Enfermarse
Enfrente
Enseña
Enseñando
Enseñar
Enseñé
Entender
Entonces
Entrada
Entre
Esa
Esas
Eschuchando
Escoger
Escribiendo
Escribieron
Escribió
Ese
Esos
Especialidad
Esperar
Esta
Estabas
Estación
Estadio
Estantería
Estar
Estar (preterite tense)
Estas
Este
Esto
Estornudo
Estos
Estrés
Estudiaste
Estudié
Estuve
Estuvieron
Estuviste
Exposición
Faltar
Famosa
Famoso
Fascinar
Fecha
Felicidades
Felicitaciones
Finalmente
Fotos
Fue
Fuera
Fui
Fuiste
Fumar
Física
Galleta
Ganas
Gastar
Girar
Gordo
Gorra
Gracioso
Graduarse
Gran
Gravedad
Gris
Guayabera
Gustar
Gustaría
Gustó
Guía
Haber
Habitación
Hablando
Hablaste
Hable más despacio.
Hablé
Hacer
Hacer juego
Haciendo
Hay
Hermoso
Hizo
Idéntico
Imagen\imágenes
Importar
Interesan
Interesar
Invitar
Ir
Jubilarse
Juega
Jugar
Jugar
La adolescencia
La alegría
La amistad
La autopista
La boda
La cabeza
La caja
La carretera
La cebolla
La chuleta
La clienta
La clínica
La corbata
La crema de afeitar
La ducha
La dueña/el dueño
La edad
La enfermera/el enfermero
La farmacia
La garganta
La granja
La gripe
La infección
La juventud
La madurez / la inmadurez
La muerte
La niñez
La operación
La oreja
La paciente
La pared
La pareja
La pasta de dientes
La pastilla
La pierna
La pierna/las piernas
La quinceañera
La radiografía
La rebaja
La rodilla
La ropa
La ropa interior
La sala de emergencia
La salud
La sorpresa
La tienda
La toalla
La tos
La vejez
La zanahoria
Lago
Largo
Las arvejas
Las escapas de lanvida
Las etapas de la vida
Las gafas
Las gafas de sol
Las galletas
Las medias
Las pantuflas
Las piernas
Las sandalias
Las uvas
Lastimarse
Lavarme
Lavarnos
Lavarse
Lavarse la cara
Lavarse las manos
Lección
Lengua
Lentes
Lento/a
Les
Levantar
Levantarme
Levantarnos
Levantarse
Levantarte
Levántate
Leyendo
Librería
Ligeras
Limpiar
Limpió
Llamar
Llave
Llegar
Llegar
Llevar
Llevarse bien/mal
Llover
Llovió
Llueve
Lluvia
Loca
Loco
Los bluejeans
Los calcetines
Los camarones
Los colores
Los dulces
Los entremeses
Los guantes
Los pantalones cortos
Los zapatos de tenis
Luchar
Luego
Lugar
Lápices
Lávate las manos
Maleta
Mandar
Mandé
Manejar
Manejar/conducir
Mantequilla
Maquillarse
Mareado/a
Marrón
Mas
Medico
Mejor
Menos
Merendar
Meseros
Mil
Millones
Mirando
Mirar
Miró
Mismas
Mismo/a
Molestar
Montar
Morado
Morir
Muchas veces
Mundo
Más
Más alto
Más tarde
Nacer
Nadamos
Nadie
Naranja
Nariz
Nerviosa
Nervioso
Nevar
Nevera
Nevó
Nieva
Nieve
Ninguno
No lo vi
Nos
Nota
Noventa
Nublado
Nuestro
Nueva
Nunca/jamas
Odiar
Ofrecer
Oigo
Olividar
Olvidar
Ontoño
Oraciones
Oreja
Oscuro
Otra
Oír
Pagar
Palabra
Paquetes
Par
Para
Para detener
Parada
Parar
Parecer
Parsarlo bien/mal
Puede repetirlo?
Parte
Partido
Pasado
Pasajeros
Pastel
Patineta
Peces gordos
Pedir
Peinarse
Pensando
Pensar
Peore
Perder
Perdone
Perezoso
Pies
Piramide
Pizarra
Playa
Pobre
Poco
Pocos
Poder
Poder
Poder (preterite tense)
Poner
Poner
Poner (preterite tense)
Poner una inyección
Ponerse crema de afeitar
Ponerte
Por
Por favor
Por la mañana
Por la noche
Por lo menos
Por último
Posible
Practicar
Practiqué
Preferido
Preferido
Prestar
Primer
Probador
Probar
Probarse
Probarte
Probaste
Probé
Pronto
Pronto
Puestas
Página
Pájaros
Que
Queda
Quedar
Quedar
Quedarnos
Quedarse
Querer
Querido
Querría
Quinientos
Quisiera
Quizás
Qué
Rapido
Rebajar
Rebajas
Recetar
Recetas
Recomendar
Recordar
Regalar
Regatear
Reirse
Relajarse
Reseñas
Responder
Responsable
Respuesta
Rico
Romper
Romperse
Romperse (la pierna)
Rosado
Ruido
Saber
Saber a ajo
Sabroso
Sacar(se) un diente
Sala
Saliendo
Salir
Saludable
Sano
Sed
Segue por la calle
Seguir
Segundo
Segura
Sentarse
Sentencer
Sentir
Separado/a
Separarse (de)
Ser
Servir
Sesenta
Sesenta
Setenta
Sigar
Siguiente
Sitio
Sobre
Soltero
Sonreir
Sorpender
Sorprenderse
Sorprendido/sorprendida
Soñar
Su
Sucio/a
Sufrir una enfermedad
Suya
Talla
Tampoco
Tan
Tanto
Taza
Tenedor
Tener
Tener (preterite tense)
Tener dolor
Tener fiebre
Tener una cita
Tercera
Tipo
Tocar
Todo el tiempo
Tomar
Tomar la temperatura
Torcerse
Toser
Trabaje
Traducir
Traducir
Traer
Traigar
Traigo
Un par de zapatos
Último
Una vez
Unas
Unos
Usar
Vaca
Vaqueros
Vaso
Vegetales
Vender
Vengo
Venir
Venir
Venir (preterite tense)
Ver
Ver
Vestirse
Viajaste
Viaje
Vida
Vieja/o
Viene
Viento
Viniste
Visité
Viste
Viuda
Viviste
Viví
Volar
Volver
Volver
Vuelve más tarde
Ya
Sacar
Llevar 
Mezclar 
Chingo 
Recomendar
Sugerir
Dale
crear
Robar 
Apenar 
Ojalá
hechos 
deber
Sido 
Hay
Había 
Hubo
Quitar 
amanecer 
Pared 
Acostarse 
Despertarse 
Admitir 
Contar 
Reatar 
Pedir 
Asadas 
Todavía
estilo
Obligar 
Mirada
Subir 
Oler
Mostrar 
Pitillo 
Si a lo mejor
El paraíso
Hijueputas
Malparidos 
Dejar 
Sueldo
Premio
Campamento
Hacia 
Llamado 
Conversar 
Que pena
Parrilla 
Mediodía 
Cuello 
Apagado
Apagada 
Sillón 
Lámpara 
Dolor
Cita 
Estufa 
Tocador 
Cómoda 
Encendido 
Contestar
Portátiles 
Cafetera 
Muebles 
Pared 
Alfombra 
Televisores 
Caos
Esquiar
crecimiento/urbanización
encuesta
Embotellaminento
desacelerar
carreteras
construir
lidiar
destruir
polución/contaminación
saludable
Lo dudo mucho
gente sin hogar
indigentes/indigencia
ninguna parte
rascacielos
los alrededores
vías
digamos que
agua potable
terremoto
ayuntamiento
propósito
plata
discutible
impuestos
Un gusto verlas
problemático
urbanización
infraestrutura
Estoy de acuerdo
necesario
entrar
Viabilidad 
Aspectos 
aumentar
Reevaluar
un aparcamiento
estacionar
hacia el norte
tránsito
tenemos bastante suerte
gratis
confiable
vida nocturna
habitantes
alrededor de
espectáculos
teatro callejero
casco antiguo
fantasma
el ecuador
estaciones
la mitad
aprovechar de
el extranjero
musco
los alrededores
obviamente
Es el precio que se paga
naturaleza
nublado
paraguas
paró la lluvia
soleado
dificultades
anónimo
Según
delincuencia
rascacielos
puerto
inseguridad
Calidad de vida 
Basura
acogedor
acera
peatón
delincuencia
reciclar
esquina
vereda
gasolinera
vivienda
hogar
Humo
acogedora
gratuito
avenidas
semáforos
animada
el la selva 
sostenibles
mundial
Tierra 
Seco 
Agradable 
Templado 
Relámpagos 
Archivo 
Revista 
Enviar 
Acabo si acaso
Sitios 
Desarrollar
Corregir
Anteayer
Anadir



