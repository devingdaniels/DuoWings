const WordSchema = new mongoose.Schema({
  word: {
    type: String,
    required: true,
  },
  englishDefinition: {
    type: String,
    required: true,
  },
  wordType: {
    type: String,
    required: true,
  },
  conjugation: String,
  correctCount: {
    type: Number,
    default: 0,
  },
  incorrectCount: {
    type: Number,
    default: 0,
  },
  lastCorrectDate: {
    type: [Date],
  },
  lastIncorrectDate: {
    type: [Date],
  },
  creationDate: {
    type: Date,
    required: true,
  },
  difficulty: {
    type: Number,
    default: 0,
  },
  tags: [String], //
  exampleSentence: String,
  userNotes: String,
});

const WordDeckSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  description: String,
  tags: [String],
  creationDate: {
    type: Date,
    default: Date.now,
  },
  insertOrder: [Number],
  words: [WordSchema],
  // Gamification Fields
  experiencePoints: {
    type: Number,
    default: 0,
  },
  level: {
    type: Number,
    default: 1,
  },
  completedChallenges: [String], // IDs or names of completed challenges
  badges: [String], // IDs or names of earned badges
  streak: {
    type: Number,
    default: 0,
  },
  lastStreakDate: {
    type: Date,
  },
});



// QuizResult Schema
const quizResultSchema = new mongoose.Schema({
  wordSet: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'WordSet',
    required: true,
  },
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  score: Number,
  date: {
    type: Date,
    default: Date.now,
  },
});

// DailyChallenge Schema
const dailyChallengeSchema = new mongoose.Schema({
  wordSet: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'WordSet',
    required: true,
  },
  date: {
    type: Date,
    required: true,
  },
});

// Leaderboard Schema
const leaderboardSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  score: Number,
  rank: Number,
});

// Badge Schema
const badgeSchema = new mongoose.Schema({
  name: String,
  description: String,
  criteria: {
    // Define criteria for earning the badge
  },
});

// UserPreferences Schema
const userPreferencesSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  darkMode: Boolean,
  notifications: Boolean,
  difficultyLevel: String,
});


---------------------------------------------------------------------------------

import { useState } from "react";

const spanishWords = [
  { word: "hola", definition: "hello" },
  { word: "adios", definition: "goodbye" },
];

const VocabCard = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);

  const handleCardClick = () => {
    setIsFlipped(!isFlipped);
  };

  const handleNextClick = () => {
    const nextIndex = (currentIndex + 1) % spanishWords.length;
    setCurrentIndex(nextIndex);
    setIsFlipped(false);
  };

  const handlePrevClick = () => {
    const prevIndex =
      (currentIndex - 1 + spanishWords.length) % spanishWords.length;
    setCurrentIndex(prevIndex);
    setIsFlipped(false);
  };

  return (
    <div className="vocab-card-container">
      <div
        className={`vocab-card ${isFlipped ? "flipped" : ""}`}
        onClick={handleCardClick}
      >
        <div className="card">
          <div className={`face front ${isFlipped ? "hidden" : ""}`}>
            {spanishWords[currentIndex].word}
          </div>
          <div className={`face back ${isFlipped ? "" : "hidden"}`}>
            {spanishWords[currentIndex].definition}
          </div>
        </div>
      </div>
      <div className="navigation-buttons">
        <button onClick={handlePrevClick}>Previous</button>
        <button onClick={handleNextClick}>Next</button>
      </div>
    </div>
  );
};

export default VocabCard;


// CSS

.vocab-card-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.vocab-card {
  perspective: 1000px;
  width: 200px;
  height: 300px;
  position: relative;
  cursor: pointer;
}

.vocab-card.flipped .card {
  transform: rotateX(180deg);
}

.card {
  width: 100%;
  height: 100%;
  position: absolute;
  transform-style: preserve-3d;
  transition: transform 0.5s;
}

.face {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 24px;
  border-radius: 5px;
  backface-visibility: hidden;
  position: absolute;
  background-color: #3498db;
  color: #fff;
  transition: opacity 0.5s; /* Add opacity transition */
}

.face.back {
  background-color: #e74c3c;
  transform: rotateX(180deg);
}

.face.hidden {
  opacity: 0; /* Hide non-visible faces */
}

.navigation-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.navigation-buttons button {
  background-color: #3498db;
  color: #fff;
  border: none;
  border-radius: 5px;
  padding: 10px 15px;
  font-size: 16px;
  cursor: pointer;
}

.navigation-buttons button:hover {
  background-color: #2980b9;
}



-------------------------------------FUNCTION TO RETRIEVE AND RETURN ALL WORDS AS ARRAY--------------------------------------------

import * as fs from "fs/promises";
import { Response, Request } from "express";

function capitalizeFirstLetter(word: string) {
  return word.charAt(0).toUpperCase() + word.slice(1);
}

async function readFileAndCreateArray(filePath: string): Promise<string[]> {
  try {
    const content = await fs.readFile(filePath, "utf8");
    const lines = content
      .split(/\r?\n/) // Split on newlines
      .map((line) => line.trim()) // Remove leading/trailing whitespace
      .filter((line) => line !== ""); // Remove empty lines
    const wordsArray: string[] = [];
    // Loop through the lines and split into words
    for (const line of lines) {
      const words = line.split(",");
      for (const word of words) {
        wordsArray.push(capitalizeFirstLetter(word.trim()));
      }
    }
    return wordsArray;
  } catch (error) {
    console.error("An error occurred while reading the file:", error);
    return [];
  }
}

export async function getAllWords(req: Request, res: Response): Promise<void> {
  const filePath = "./services/words.txt"; // Relative to the root of the project
  const wordsArray = await readFileAndCreateArray(filePath);
  wordsArray.sort();
  res.status(200).json(wordsArray);
}
